객체 지향 프로그래밍(OOP)은 프로그램을 구성하는 데이터와 해당 데이터를 조작하는 기능을 하나로 묶어서 객체라는 독립된 단위로 다루는 프로그래밍 방법론이다.

 OOP의 기본적인 개념


1.클래스(Class): 객체를 만들기 위한 설계도
2.객체(Object): 클래스를 기반으로 생성된 인스턴스
3.상속(Inheritance): 하위 클래스가 상위 클래스의 특성과 기능을 상속받아 사용하는 개념
4.다형성(Polymorphism): 동일한 메서드가 다른 객체에서 다르게 동작하는 개념
5.캡슐화(Encapsulation): 데이터와 해당 데이터를 다루는 메서드를 하나로 묶어 외부로부터의 접근을 제어하는 개념


OOP는 코드의 재사용성, 유지 보수성, 확장성 등을 높이기 위해 사용된다.
클래스를 통해 객체를 만들면 코드의 가독성이 높아지고, 객체 간의 관계를 명확하게 표현할 수 있다.
상속을 사용하면 중복된 코드를 줄일 수 있고, 다형성을 사용하면 유연한 코드를 작성할 수 있다.
또한, 캡슐화를 사용하여 데이터의 무결성을 보호하고, 코드의 안정성을 높일 수 있다.

OOP의 대표적인 특정 4가지

1.추상화 : 공통의 속성이나 기능을 묶어서 이름을 붙히는 것으로 ㅎ