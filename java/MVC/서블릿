서블릿은 Dynamic Web Page를 만들 때 사용되는 자바 기반의 웹 애플리케이션 프로그래밍 기술이다

*웹을 만들때는 다양한 요청(Request)과 응답(Response)이 있기 마련이고 이 요청과 응답에는 규칙이 존재한다
이러한 요청과 응답을 일일이 처리하기 힘들기 때문에 서블릿은 이러한 웹 요청과 응답의 흐름을 간단한 메서드 호출만으로
체계적으로 다룰 수 있게 해주는 기술

서블릿은 자바 클래스로 웹 애플리케이션을 작성한 뒤 이후 웹 서버 안에 있는 웹 컨테이너에서 이것을 실행하고,
웹 컨테이너에서는 서블릿 인스턴스를 생성 후 서버에서 실행되다가 웹 브라우저에서 서버에 요청을 하면
요청에 맞는 동작을 수행하고 웹 브라우저에 HTTP형식으로 응답한다.

서블릿의 주요 특징 정리
1. 클라이언트의 요청(Request)에 대해 동적으로 작동하는 웹 애플리케이션 컴포넌트
2. HTML을 사용하여 응답(Response)한다
3. JAVA의 스레드를 이용하여 동작한다
4. MVC 패턴에서의 컨트롤러로 이용된다
5. HTTP 프로토콜 서비스를 지원하는 javax.servlet.http.HttpServlet 클래스를 상속받는다
6. UDP보다 속도가 느리다 -> UDP(User Datagram Protocol)는 비연결형, 신뢰성이 없는 전송 프로토콜
7. HTML 변경 시 servlet을 재 컴파일 해야 하는 단점이 있다



서블릿 컨테이너란? -> 서블릿을 담고 관리해주는 컨테이너
*서블릿 컨테이너는 구현되어 있는 servlet 클래스의 규칙에 맞게 서블릿을 관리해주며 클라이언트에서 요청을 하면
컨테이너는 HttpServletRequest, HttpServletResponse 두 객체를 생성하며 post, get 여부에 따라 동적인 페이지를 생성하여 응답을 보낸다

*HttpServletRequest : http프로토콜의 Request정보를 서블릿에게 전달하기 위한 목적으로 사용하며 헤더 정보,
파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메서드와 Body의 Stream을 읽어 들이는 메서드를 가지고 있다

*HttpServletResponse : WAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한
HttpServletResponse 객체를 생성하여 서블릿에게 전달하고 이 객체를 활용하여 content type, 응답코드, 응답 메세지 등을 전송한다


서블릿 컨테이너의 주요 기능
1. 생명주기 관리
-> 서블릿의 생명주기를 관리한다 -> 서블릿 컨테이너가 기동 되는 순간 서블릿 클래스를 로딩해서 인스턴스화 하고,
초기화 메서드를 호출하고, 요청이 들어오면 적절한 서블릿 메서드를 찾아서 동작한다. 그리고 서블릿의 생명이 다하는 순간
가비지 컬렉션을 통해 메모리에서 제거합니다.

2.통신 지원
-> 클라이언트의 Request를 받아주고 Response를 보낼 수 있게 웹 서버와 소켓을 만들어서 통신을 해준다.
우리가 통신을 한다고 생각할 때 소켓을 만들고, 특정 포트를 리스닝하고, 연결 요청이 들어오면 스트림을 생성해서
요청을 받는다고 알고 있는데 이 과정을 서블릿 컨테이너가 대신 해주고 있다.
서블릿 컨테이너는 소켓을 만들고 listen,accept 등의 기능을 API로 제공하여 복잡한 과정을 생략할 수 있게 해주고
개발자로서 비즈니스 로직에 더욱 집중할 수 있게 만들어준다

3. 멀티스레딩 관리
-> 서블릿 컨테이너는 해당 서블릿의 요청이 들어오면 스레드를 생성해서 작업을 수행한다. 
그렇기에 동시에 여러 요청이 들어와도 멀티스레딩 환경으로 동시다발적인 작업을 관리할 수 있다.
또한 이렇게 한번 메모리에 올라간 스레드는 다시 생성할 필요가 없기에 메모리 관리에 효율적이다.

4. 선언적인 보안관리
-> 서블릿 컨테이너는 보안 관련된 기능을 지원한다. 그렇기에 서블릿 또는 자바 클래스 안에 보안 관련된 메서드를 구현하지 않아도 된다.


★서블릿의 동작 과정
1. Servlet Request, Servlet Response 객체를 생성한다
2. 설정 파일을 참고하여 매핑할 Servlet을 확인한다
3. 해당 서블릿 인스턴스 존재의 유무를 확인하여 없으면 init()메소드를 호출하여 생성한다
4. Servlet Container에 스레드를 생성하고 service를 실행한다
5. 응답을 처리하였으면 destroy() 메소드를 실해하여 ServletRequest,ServletResponse 객체를 소멸한다




---------------------------------------------------------------------------------------------

간단한 용어 정리
init() => 서블릿이 처음으로 요청될 때 초기화를 하는 메서드이다.

service() => 서블릿 컨테이너가 요청을 받고 응답을 내려줄 때 필요한 서블릿의 service 메서드이다.
Servlet interface를 구현한 HttpServlet 클래스의 doGet, doPost 같은 메서드들이 호출된다.

destroy() => 더이상 사용되지 않는 서블릿 클래스는 주기적으로 서블릿 컨테이너가 destroy() 메서드를 호출하여 제거한다

