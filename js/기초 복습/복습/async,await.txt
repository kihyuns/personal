async 와 await은 Promise를 깔끔하게 사용할 수 있는 방법이다
하지만 무조건 async 와 await로 대체해서 사용하는 것은 아니다

async - async 라는 키워드를 함수 앞에 쓰면 코드블럭이 자동으로 Promise로 바뀐다

async 예제

    async function fetchUser() {
        return  'hyun';
    }
    const user = fetchUser();
    console.log(user);
    

await - await키워드는 async가 붙은 함수 안에서만 쓸 수 있다

await 예제

function delay(ms) {
    return new Promise(res => setTimeout(res, ms));  //정해진 ms가 지나면 promise를 리턴하는 코드
}

async function getApple() {
    await delay(3000)   //await은 async안에서만 사용가능
    return 'apple';
}
                        await을 사용해서 변환
function getBanana() {           =>            async function getBanana() {
    return delay(3000)                          await delay(3000)   
    .then (() => 'banana')                      return 'banana';
}                                              }


이후에 호출하는 코드를 작성

function viewFruits() {
    return getApple().then(apple => {
        return getBanana().then(banana => `${apple} + ${banana}`)
    })
}
★위 코드는 콜백지옥의 예가 되기 때문에 async를 이용해서 간단하게 바꿔주면 좋다.

            ↓↓↓↓↓       async를 사용해서 간단하게 변경

async function viewFruits() {
    const a = await getApple();         여기서 get Apple과 Banana는 서로 연관이 없기 때문에
    const b = await getBanana();        딜레이를 병렬처리 해주는게 효율적이다
    return `${a} + ${b}`
}

            ↓↓↓↓↓       Promise를 사용해서 간단하게 변경

async function viewFruits() {
    const aPromise = getApple();         Promise를 사용해서 만들자마자 실행된다
    const bPromise = getBanana();
    const a = await aPromise;           await을 사용해서 기다렸다가 실행한다
    const b = await bPromise;
    return `${a} + ${b}`
}

            ↓↓↓↓↓       서로 연관이 없어서 병렬적으로 실행이 가능할 땐 Promise.all을 사용한다

// Promise.all를 사용해서 서로 관련없는 Promise를  배열안에 값으로 모아서 전달해주는 예
function viewAllFruits() {
    return Promise.all([getApple(),getBanana()]) 
->  Promise.all은 Promise배열을 전달하게 되면 전달받은 모든 프로미스들을 병렬적으로 다 받아서 모아준다
    .then(res => res.join(' + ')) -> 배열을 문자열로 모아주는 join사용
}
viewFruits().then(console.log)


// Promise.race (가장 먼저 받는 값을 출력하는 예)
function firstOne() {
    return Promise.race([getApple(), getBanana()]);  
->  race는 전달된 Promise중에서 가장 먼저 값을 리턴하는 값만 전달한다
}

firstOne().then(console.log)



 
        
