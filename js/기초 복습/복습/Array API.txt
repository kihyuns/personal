주어진 배열을 문자열로 변환하는 방법 = join
ex)const fruits = ['apple','banana','orange']
   const res = fruits.join();
   -> apple,banana,orange
만약 const res = fruits.join('and'); 라면 구분자가 and로 변경 (디폴트는 ','이다)
   -> 사과and두번째과일 추가and3번째 추가and딸기and사과

주어진 문자열을 배열로 변환하는 방법 = split
ex) const fruits = 'apple,banana,orange'
    const res = fruits.split();
    ->['사과', '두번째과일 추가', '3번째 추가', '딸기', '사과']
★하지만 구분자를 적지 않으면 전체가 하나의 배열로 취급되기 때문에 split은 구분자를 반드시 적어야 한다
     const res = fruits.split(',');
     추가로  const res = fruits.split(',',2);로 구분자 뒤에 숫자를 적으면 그 숫자만큼의 배열만 보여줌


주어진 배열을 거꾸로 만드는 방법 = reverse()
ex) const array = [1,2,3]
    const res = array.reverse();
    => [3, 2, 1]  
★reverse는 배열 자체를 변경하기 때문에 이후 array를 호출해도 변경된 값을 리턴한다

주어진 배열에서 1,2번째 배열을 제외하기 = slice = 원하는 부분만 리턴할수 있기 때문에 slice가 적합하다
(splice는 배열 자체를 수정하기 때문에 적합하지 않다)


학생을 찾아야 하는데 90점 이상인 학생을 싶을 때 = find
*find*
1.첫번째로 찾아진 요소를 리턴한다 (전달된 콜백함수가 true일 때)
2.콜백함수를 만들어서 전달해야 한다
3.function을 만들고 그 안에 this, value, index, obj 총 4개의 파라미터를 받을 수 있다
4.해당 콜백함수는 boolean타입을 리턴해야 한다
ex) const result = students.find(students => students.score === 90);
=>Student {name: 'C', age: 30, enrolled: true, score: 90}

학생들 중 수업에 등록한 학생만 골라내어 배열로 만들기 = filter
&& 나 || 를 사용해서 추가 조건문을 만들 수 있다
ex) const result = students.filter(students => students.enrolled && students.score >80);  
=> [Student, Student]
0: Student {name: 'C', age: 30, enrolled: true, score: 90}
1: Student {name: 'E', age: 18, enrolled: true, score: 88}
length: 2
[[Prototype]]: Array(0)

학생배열에서 점수만 추출해서 배열로 만들기 = map
map은 배열안에 들어있는 요소들을 원하는 함수를 이용해서 다른 방식에 데이터를 만들고 싶을 때 사용
ex) const result = students.map(students => students.score) -> 함수를 뒤에 붙여서 데이터 변경 가능
=> [45, 80, 90, 66, 88]

학생배열 안에 점수가 50점보다 작은 학생이 있으면 true를 리턴하기 = some
some = 조건에 충족하는 값이 하나라도 있으면 true를 리턴한다 (없으면 false)
ex) const result = students.some(students => students.score < 50);
=> true
☆every =배열의 모든 값이 조건에 충족하면 true를 리턴한다
    const res = students.every(students => students.score > 0)
=> true
즉 배열중 하나라도 만족하면 되는 값을 찾을 땐 some, 모든 배열의 조건을 만족할 땐 every

학생의 평균점수 구하는 방법 = reduce로 총 합을 구한 뒤 배열 length(길이)로 나눈다
reduce는 배열 하나하나를 돌면서 값을 누적할 때 사용함
ex) const result = students.reduce((aa, bb) => {
        console.log('-------')
        console.log(aa)
        console.log(bb)
        return aa + bb.score
    }, 0) -> 0은 초기값이고 int로 설정해야 값을 계산할 수 있다
여기서 aa는 초기값 0이 들어가고 bb는 첫 배열이 들어간다. 
이후 aa값에 return한 값이 들어가고 bb에는 그 다음 배열이 들어감
console.log(result) => 369 (0부터 배열들의 score를 더한 총 값)   ※reduceRight은 배열을 거꾸로 호출해서 값을 구함
이렇게 result값을 구했으면 console(result/students.length)로 73.8값을 구할 수 있다 (students.length = 5이다)


학생들의 모든 점수를 string타입으로 변환해서 만들고 싶을 때 =  map으로 점수배열만 얻어서 join으로 string타입으로 변환
ex) const res = students.map(students => students.score).join();
=> 45,80,90,66,88
*배열 자체를 리턴하기 때문에 API를 섞어서 호출할 수 있다
+ const res = students
.map(students => students.score)
.filter(score=>score > 50)
.join();
=> 80,90,66,88

위에서 구한 학생들의 점수를 낮은 점수 순으로 보고 싶을 때 = sort 추가
ex)
    const res = students.map(students => students.score)
    .sort() -> 값이 낮은 순으로 정렬
    .reverse() ->역순으로 정렬하므로써 높은 순서로 정렬된다
    .join();
    console.log(res)
-> 90,88,80,66,45
